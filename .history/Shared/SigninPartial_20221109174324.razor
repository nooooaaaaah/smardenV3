@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

@using SmardenV3.Data
@inject IUserService UserService

@namespace SmardenV3.Shared.SigninPartial

<div id="login-error-msg-holder">
    <p id="login-error-msg">Invalid username <span id="error-msg-second-line">and/or password</span></p>
</div>

<form id="login-form">
    <input type="text" name="username" id="username-field" class="login-form-field" placeholder="Username">
    <input type="password" name="password" id="password-field" class="login-form-field" placeholder="Password">
    <button class="btn-info" id="login-form-submit">Login</button>
</form>
@* @foreach (var user in users)
    {
    <p>@user.CustomerName</p>
    } *@



@code {
    
    private IEnumerable<UserData> users = Array.Empty<UserData>();
    protected async Task OnIntializedAsync()
    {
        users = await UserService.GetUsers();
        Console.WriteLine("My debug output.");
    }
    
    @* private IEnumerable<UserData> users = Array.Empty<UserData>();
        private bool getuserError;
        private bool shouldRender;
        protected override bool ShouldRender() => shouldRender;

        protected override async Task OnInitializedAsync()
        {

        var request = new HttpRequestMessage(HttpMethod.Get,
        "https://localhost:7137/api/user");

        var client = ClientFactory.CreateClient();

        HttpResponseMessage response = new HttpResponseMessage();
        try
        {
        response = await client.SendAsync(request);
        }
        catch (Exception e)
        {
        getuserError = true;
        }
        finally
        {
        if (!getuserError)
        {
        using var responseStream = await response.Content.ReadAsStreamAsync();
        users = await JsonSerializer.DeserializeAsync
        <IEnumerable<UserData>>(responseStream);
        }

        shouldRender = true;
        }
        } *@
}