@page "/signup"
@using SmardenV3.Data
@inject IUserService UserService
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStore

@* Todo finish signup page *@
<div class="login-form-container">
    <div class="login-form">
        <h1 class=" mx-auto  text-center mt-1"> Welcome</h1>
        <p class="text-center">
            Thank you for visiting our Smarden! We are excited to offer you a personalized experience tailored to your
            needs.
            Sign up now to create your account and access all of our features and services.
        </p>
        <label class="mt-2" for="username-field">Username</label>
        <input type="text" name="Username" id="username-field" class=" p-1 form-control" @bind="newUser.Name" />
        <label class="mt-2" for="Password-field">Password</label>
        <input type="text" name="Password" id="Password-field" class=" p-1 form-control" @bind="newUser.Password" />
        <label class="mt-2" for="CustomerName-field">Full Name</label>
        <input type="text" name="CustomerName" id="CustomerName-field" class=" p-1 form-control"
            @bind="newUser.CustomerName" />
        <label class="mt-2" for="CustomerEmail-field">Email</label>
        <input type="text" name="customerEmail" id="email-address-field" class=" p-1 form-control"
            @bind="newUser.CustomerEmail" />
        <label class="mt-2" for="CustomerAddress-field">Street Address</label>
        <input type="text" name="CustomerAddress" id="CustomerAddress-field" class=" p-1 form-control"
            @bind="newUser.CustomerAddress" />
        @if (error)
        {
            <p class="error-message">Try Again There was an error</p>
        }
        <button class="btn-indigo btn mt-2 text-light" @onclick="SignUpOnClick">Create Account</button>
    </div>
</div>


@code {
    UserData newUser = new UserData { };
    HttpResponseMessage? response;
    bool error = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<UserData>("user");
        UserData? loggedInUser = result.Success ? result.Value : null;
        if (loggedInUser != null)
        {
            NavManager.NavigateTo("/");
        }
    }
    private async Task SignUpOnClick()
    {
        if (newUser.Name != null && newUser.Password != null && newUser.CustomerName != null)
        {
            response = await UserService.PostUser(newUser);
            UserData? userResponseContent = await response.Content.ReadFromJsonAsync<UserData>();
            if (userResponseContent != null)
            {
                await ProtectedSessionStore.SetAsync("user", newUser);
                NavManager.NavigateTo("/");
            }
        }
        else
        {
            error = true;
        }
    }

}