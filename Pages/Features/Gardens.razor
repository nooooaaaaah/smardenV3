@page "/gardens"
@using System.Net.Sockets
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h3>Gardens</h3>

@if (getgardenError)
{
    <p>Unable to get gardens from Smarden_API. Please try again later.</p>
}
else
{
    <TableTemplate Items="gardens" Context="garden">
        <TableHeader>
            <th>GardenID</th>
            <th>Name</th>
            <th>UserID</th>
        </TableHeader>
        <RowTemplate>
            <td>@garden.GardenID</td>
            <td>@garden.Name</td>
            <td>@garden.UserID</td>
        </RowTemplate>

    </TableTemplate>
}

@code {
    private IEnumerable<GardenData> gardens = Array.Empty<GardenData>();
    private bool getgardenError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {

        var request = new HttpRequestMessage(HttpMethod.Get,
        "https://localhost:7137/api/garden");

        var client = ClientFactory.CreateClient();

        HttpResponseMessage response = new HttpResponseMessage();
        try
        {
            response = await client.SendAsync(request);
        }
        catch (Exception e)
        {
            getgardenError = true;
        }
        finally
        {
            if (!getgardenError)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                gardens = await JsonSerializer.DeserializeAsync
                <IEnumerable<GardenData>>(responseStream);
            }
            else
            {
                getgardenError = true;
            }

            shouldRender = true;
        }
    }

    public class GardenData
    {
        [JsonPropertyName("gardenId")]
        public int GardenID { get; set; }
        [JsonPropertyName("gardenName")]
        public string? Name { get; set; }
        [JsonPropertyName("userId")]
        public int UserID { get; set; }
    }
}