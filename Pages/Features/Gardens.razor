@page "/gardens"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids
@using SmardenV3.Data
@inject IGardenService GardenService


@{
    var InitSearch = (new string[] { "GardenID", "Name" });
    var Tool = (new List<string>() { "Search" });
}

<h3 class="text-info">Gardens</h3><br>

<SfGrid DataSource="@gardens" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems">
    <GridEvents OnActionComplete="ActionComplete" TValue="GardenData"></GridEvents>
    <GridSearchSettings Fields=@InitSearch Operator=Syncfusion.Blazor.Operator.Contains IgnoreCase="true">
    </GridSearchSettings>
    <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" Mode="EditMode.Normal">
    </GridEditSettings>
    <GridColumns>
        <GridColumn Field="@nameof(GardenData.GardenID)" HeaderText="Garden ID" IsPrimaryKey="true" IsIdentity="true">
        </GridColumn>
        <GridColumn Field="@nameof(GardenData.Name)" HeaderText="Garden Name"></GridColumn>
        <GridColumn Field="@nameof(UserData.UserID)" HeaderText="User ID" EditType="EditType.DropDownEdit"></GridColumn>
    </GridColumns>
</SfGrid>


@code {
    List<string> ToolbarItems = new List<string> { "Add", "Edit", "Delete", "Update", "Cancel" };
    private IEnumerable<GardenData> gardens = Array.Empty<GardenData>();
    protected override async Task OnInitializedAsync()
    {
        gardens = await GardenService.GetGardens();
    }
        UserData? loggedInUser;
    protected override async Task OnParametersSetAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<UserData>("user");
        loggedInUser = result.Success ? result.Value : null;
    }

    public void ActionComplete(ActionEventArgs<GardenData> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers once editing operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers once add operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            Console.WriteLine("Save: ", args);
            if (args.Action == "Add")
            {
                GardenService.PostGarden(args.Data);
            }
<<<<<<< HEAD
            else if (args.Action == "Edit")
=======
            Console.WriteLine(args.Action);
            if (args.Action == "Edit")
>>>>>>> 73c1dfc3829de207a3ebaa4a64b8fd2957d54487
            {
                GardenService.EditGarden(args.Data);
            }
            // Triggers once save operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
<<<<<<< HEAD
=======
            Console.WriteLine("Delete: ", args);
>>>>>>> 73c1dfc3829de207a3ebaa4a64b8fd2957d54487
            GardenService.DeleteGarden(args.Data.GardenID);
            // Triggers once delete operation completes
        }
    }

}